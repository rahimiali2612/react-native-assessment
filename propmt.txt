
Prompt for User Authentication App Assignment
Create a React Native application with user authentication features, including Login, Signup, and Home screens. Implement an AuthContext using React's Context API to manage the global authentication state.
🎯 Objective
Build a mobile app that demonstrates your understanding of:

Authentication flows
State management using Context API
Form validation and error handling
Navigation between screens
Creating a modern, stylish UI using Tailwind and component libraries


Requirements
1. Authentication Context Setup

[ ] Create AuthContext with:login(userData)
[ ] signup(userData)
[ ] logout()
[ ] user state to store logged-in user info
2. Screens

[ ] Login ScreenInputs: Email, Password
[ ] Buttons: Login, Go to Signup
[ ] Error messages:Invalid email/password format
[ ] Incorrect credentials
[ ] Signup ScreenInputs: Name, Email, Password
[ ] Buttons: Signup, Go to Login
[ ] Error messages:Missing fields
[ ] Invalid email format
[ ] Password < 6 characters
[ ] Home ScreenDisplay user's name and email
[ ] Logout button to return to Login screen
3. Persist Authentication
[ ] Use AsyncStorage to keep user logged in after app restart

4. Navigation
[ ] Use React Navigation to switch between Login, Signup, and Home screens

5. UI Design

[ ] Clean, modern, and intuitive layout
[ ] Use Tailwind CSS/Nativewind for utility-first styling
[ ] Combine with component libraries like NativeWind, React Native Paper, or NativeBase for polished UI elements
[ ] Styled inputs, buttons, and error messages
[ ] Entire project is in JavaScript
[ ] Added comprehensive type definitions in src/types/
[ ] Updated all components, screens, and services with proper typing
[ ] Configured tsconfig.json with proper React Native settings
[ ] Added navigation type safety with typed parameters
[ ] All TypeScript compilation passes without errors

🌟 Bonus Tasks (Optional)

- Add password visibility toggle with eye icon
- Password confirmation field in signup
- Real-time form validation feedback
- Loading states and animations
- Profile picture upload functionality


🔧 Technical Requirements
- Minimum React Native version: 0.72+
- Node.js version: 18+ 
- Expo SDK version: 49+ (optional - can use bare React Native)
- Target platforms: iOS & Android (with web compatibility)
- Database: Local SQLite using react-native-sqlite-storage (no external APIs required)
- Authentication: Local validation (no OAuth/external auth)


✅ Detailed Acceptance Criteria

Login Flow:
-  Valid email format validation (user@domain.com)
-  Password minimum 6 characters
-  Display loading state during authentication
-  Clear error messages for invalid credentials
-  Remember login state after app restart

Signup Flow:
-  All fields required validation
-  Email uniqueness check
-  Password confirmation field (bonus)
-  Successful signup auto-navigates to Home

Home Screen:
-  Display welcome message with user's name
-  Show user email
-  Logout clears all stored data
-  Logout navigates back to Login


🔧 Error Handling Requirements
- Network connectivity issues
- Form validation feedback in real-time
- Database operation failures
- Graceful degradation when AsyncStorage fails
- User-friendly error messages (no technical jargon)


⚡ Performance Requirements
- App startup time < 3 seconds
- Screen transitions < 300ms
- Form submission feedback within 1 second
- Smooth animations (60fps)
- Responsive design for different screen sizes


🔒 Security Requirements
- Password hashing before storage
- Input sanitization
- Secure storage practices
- No sensitive data in logs
- Protection against SQL injection


📤 Enhanced Submission Requirements

- GitHub repository with project code
- README.md with comprehensive documentation (see below)
- [ ] Screenshots or short video demo (2-3 minutes max)
- [ ] Architecture diagram
- [ ] Time spent breakdown
- [ ] Challenges faced and solutions


📚 README.md Documentation Requirements
Your README.md should include:
- [ ] Project setup instructions
- [ ] Environment requirements
- [ ] Installation steps
- [ ] Running the app
- [ ] Known issues/limitations
- [ ] Future improvements
- [ ] Architecture decisions


💻 Tech Stack
Core Technologies

React Native (with or without Expo) for cross-platform mobile development
React Context API for global state management
React Navigation for screen transitions
AsyncStorage for persisting authentication state
Form Handling

React Hook Form for managing form state and validation
Yup for input validation schema
UI Components & Styling

Tailwind CSS (via NativeWind) for utility-first styling
React Native Paper or NativeBase for styled components
React Native Vector Icons for icons (e.g., password toggle)
Local Database

React Native SQLite Storage (react-native-sqlite-storage) for storing user data within the app
- Cross-platform support (iOS, Android)
- Web compatibility for React Native Web projects
- No Expo dependency required
- Mature and well-maintained library

Database Implementation Options:
- Primary: react-native-sqlite-storage for mobile platforms
- Web fallback: localStorage/IndexedDB for React Native Web
- Alternative: react-native-sqlite-2 (lightweight option)
- Advanced: WatermelonDB (for complex reactive apps)
This tech stack ensures the app is lightweight, efficient, and visually appealing, with a modern design and smooth user experience.


🎯 Evaluation Criteria

Code Quality (25%):
- Clean, readable code
- Proper project structure
- Error handling
- Following React Native best practices

Functionality (30%):
- All requirements working correctly
- Smooth user experience
- Proper form validation
- Authentication flow working

UI/UX (25%):
- Modern, clean design
- Responsive layout
- Intuitive navigation
- Consistent styling

Technical Implementation (20%):
- Proper Context API usage
- Efficient state management
- Performance optimization
- Security considerations


⏱️ Development Timeline Suggestion
Week 1: Project setup, navigation, and basic UI
Week 2: Authentication logic, database integration
Week 3: Form validation, error handling, testing
Week 4: Polish, documentation, and submission

🎉 PROJECT COMPLETION STATUS
[ ] All core requirements implemented
[ ] Authentication system fully functional
[ ] Modern UI with Tailwind CSS styling
[ ] React Native SQLite Storage integration
[ ] Form validation with Yup
[ ] React Navigation setup
[ ] AsyncStorage for persistence
[ ] Comprehensive documentation

📱 RUNNING STATUS: [ ] Successfully running in Android Studio
📍 Location: d:\Assesment\react-native-auth-app\
🚀 Command: npm start (Active)

IMPLEMENTATION NOTES:
- Complete React Native authentication app created
- All required screens (Login, Signup, Home) implemented
- Context API for global state management
- Password hashing with bcryptjs for security
- Real-time form validation
- Loading states and error handling
- Modern component-based architecture
- Ready for production use
